matmul.c:6:23: missed: couldn't vectorize loop
matmul.c:7:28: missed: statement clobbers memory: _1 = rand ();
matmul.c:5:6: note: vectorized 0 loops in function.
matmul.c:7:28: missed: statement clobbers memory: _1 = rand ();
matmul.c:9:1: note: ***** Analysis failed with vector mode V4SF
matmul.c:9:1: note: ***** Skipping vector mode V16QI, which would repeat the analysis for V4SF
matmul.c:12:23: missed: couldn't vectorize loop
matmul.c:12:23: missed: not vectorized: multiple nested loops.
matmul.c:13:27: missed: couldn't vectorize loop
matmul.c:20:55: missed: not vectorized: not suitable for strided load _17 = *_16;
matmul.c:18:31: missed: couldn't vectorize loop
matmul.c:20:33: missed: not vectorized: complicated access pattern.
matmul.c:11:6: note: vectorized 0 loops in function.
matmul.c:11:6: note: ***** Analysis failed with vector mode V4SF
matmul.c:11:6: note: ***** The result for vector mode V16QI would be the same
matmul.c:11:6: note: ***** Re-trying analysis with vector mode V8QI
matmul.c:11:6: note: ***** Analysis failed with vector mode V8QI
matmul.c:11:6: note: ***** Re-trying analysis with vector mode V4QI
matmul.c:11:6: note: ***** Analysis failed with vector mode V4QI
matmul.c:28:13: missed: statement clobbers memory: start_5 = clock ();
matmul.c:29:5: missed: statement clobbers memory: func_6(D) (A_7(D), B_8(D), C_9(D), size_10(D));
matmul.c:30:11: missed: statement clobbers memory: end_13 = clock ();
matmul.c:31:34: note: ***** Analysis failed with vector mode VOID
matmul.c:40:23: missed: couldn't vectorize loop
matmul.c:40:23: missed: not vectorized: loop nest containing two or more consecutive inner loops cannot be vectorized
matmul.c:6:23: missed: couldn't vectorize loop
matmul.c:7:28: missed: statement clobbers memory: _34 = rand ();
matmul.c:6:23: missed: couldn't vectorize loop
matmul.c:7:28: missed: statement clobbers memory: _43 = rand ();
matmul.c:34:5: note: vectorized 0 loops in function.
matmul.c:38:5: missed: statement clobbers memory: printf ("%-10s %-30s\n", "Size", "Plain Loop Time (seconds)");
matmul.c:44:28: missed: statement clobbers memory: A_15 = malloc (_3);
matmul.c:45:28: missed: statement clobbers memory: B_17 = malloc (_3);
matmul.c:46:28: missed: statement clobbers memory: C_19 = malloc (_3);
matmul.c:7:28: missed: statement clobbers memory: _43 = rand ();
matmul.c:7:28: missed: statement clobbers memory: _34 = rand ();
matmul.c:28:13: missed: statement clobbers memory: start_29 = clock ();
matmul.c:29:5: missed: statement clobbers memory: matrix_multiply_plain (A_15, B_17, C_19, size_13);
matmul.c:30:11: missed: statement clobbers memory: end_30 = clock ();
matmul.c:57:9: missed: statement clobbers memory: printf ("%-10d %-30f\n", size_13, _33);
matmul.c:60:9: missed: statement clobbers memory: free (A_15);
matmul.c:61:9: missed: statement clobbers memory: free (B_17);
matmul.c:62:9: missed: statement clobbers memory: free (C_19);
matmul.c:35:9: note: ***** Analysis succeeded with vector mode V4SI
matmul.c:35:9: note: SLPing BB part
matmul.c:35:9: note: Costing subgraph: 
matmul.c:35:9: note: node 0x34260c8 (max_nunits=4, refcnt=1) vector(4) int
matmul.c:35:9: note: op template: sizes[0] = 128;
matmul.c:35:9: note: 	stmt 0 sizes[0] = 128;
matmul.c:35:9: note: 	stmt 1 sizes[1] = 256;
matmul.c:35:9: note: 	stmt 2 sizes[2] = 512;
matmul.c:35:9: note: 	stmt 3 sizes[3] = 1024;
matmul.c:35:9: note: 	children 0x3426148
matmul.c:35:9: note: node (constant) 0x3426148 (max_nunits=1, refcnt=1) vector(4) int
matmul.c:35:9: note: 	{ 128, 256, 512, 1024 }
matmul.c:35:9: note: Cost model analysis: 
matmul.c:35:9: note: Cost model analysis for part in loop 0:
  Vector cost: 24
  Scalar cost: 48
matmul.c:35:9: note: Basic block will be vectorized using SLP
matmul.c:35:9: note: Vectorizing SLP tree:
matmul.c:35:9: note: node 0x34260c8 (max_nunits=4, refcnt=1) vector(4) int
matmul.c:35:9: note: op template: sizes[0] = 128;
matmul.c:35:9: note: 	stmt 0 sizes[0] = 128;
matmul.c:35:9: note: 	stmt 1 sizes[1] = 256;
matmul.c:35:9: note: 	stmt 2 sizes[2] = 512;
matmul.c:35:9: note: 	stmt 3 sizes[3] = 1024;
matmul.c:35:9: note: 	children 0x3426148
matmul.c:35:9: note: node (constant) 0x3426148 (max_nunits=1, refcnt=1) vector(4) int
matmul.c:35:9: note: 	{ 128, 256, 512, 1024 }
matmul.c:35:9: note: ------>vectorizing SLP node starting from: sizes[0] = 128;
matmul.c:35:9: note: vect_is_simple_use: operand 256, type of def: constant
matmul.c:35:9: note: vect_is_simple_use: operand 512, type of def: constant
matmul.c:35:9: note: vect_is_simple_use: operand 1024, type of def: constant
matmul.c:35:9: note: transform store. ncopies = 1
matmul.c:35:9: note: create vector_type-pointer variable to type: vector(4) int  vectorizing a pointer ref: sizes[0]
matmul.c:35:9: note: created &sizes[0]
matmul.c:35:9: note: add new stmt: MEM <vector(4) int> [(int *)&sizes] = { 128, 256, 512, 1024 };
matmul.c:35:9: note: vectorizing stmts using SLP.
matmul.c:35:9: optimized: basic block part vectorized using 16 byte vectors
matmul.c:35:9: note: ***** The result for vector mode V16QI would be the same
